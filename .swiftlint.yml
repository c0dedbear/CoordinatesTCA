excluded: # paths to ignore during linting. Takes precedence over `included`.
  - build
  - Tuist
  - Project.swift
  - Workspace.swift
  - LocalPackages/**/Derived
  - Tuist/
  - Project/

disabled_rules: # rule identifiers turned on by default to exclude from running
  - large_tuple
  - todo
  - vertical_parameter_alignment # выключено, так как swiftlint не умеет в табы
  - unused_setter_value # выключено, так как не оценена целесообразность
  - type_body_length
  - file_length
  - implicit_getter
  - function_body_length
  - no_space_in_method_call
  - multiple_closures_with_trailing_closure
  - nesting

opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - anyobject_protocol
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  - contains_over_first_not_nil
  - convenience_type
  - empty_string
  - explicit_init
  - fatal_error_message
  - first_where
  - force_try
  - force_unwrapping
  - identical_operands
  - implicitly_unwrapped_optional
  - last_where
  - legacy_random
  - let_var_whitespace
  # - literal_expression_end_indentation # выключено, так как swiftlint не умеет в табы
  - lower_acl_than_parent
  - modifier_order
  - multiline_function_chains
  - multiline_literal_brackets
  - multiline_parameters
  - nimble_operator
  # - no_extension_access_modifier # пока не пришли к решению, что так лучше
  - operator_usage_whitespace
  - override_in_extension
  - overridden_super_call
  - prohibited_interface_builder
  - prohibited_super_call
  - redundant_nil_coalescing
  - redundant_type_annotation
  - sorted_first_last
  - static_operator
  - toggle_bool
  - trailing_closure
  - unavailable_function
  - unneeded_parentheses_in_closure_argument
  - untyped_error_in_catch
  # - vertical_parameter_alignment_on_call # выключено, так как swiftlint не умеет в табы
  - vertical_whitespace_closing_braces
  - yoda_condition
  - strict_fileprivate
  - unused_import
  - contains_over_filter_count

analyzer_rules: # Rules run by `swiftlint analyze`
  - explicit_self
  - unused_declaration

warning_threshold: 1

indentation: tabs

line_length:
  warning: 150

vertical_whitespace:
  max_empty_lines: 1

identifier_name:
  min_length: 2
  max_length: 50

type_name:
  max_length: 50

#statement_position:
#  statement_mode: uncuddled_else

#trailing_comma:
#  mandatory_comma: true

cyclomatic_complexity:
  ignores_case_statements: true

trailing_closure:
  only_single_muted_parameter: true

modifier_order:
  preferred_modifier_order: [acl, override]

custom_rules:
  opening_brace_func:
    include: "*.swift"
    name: "Opening brace rule"
    message: "Opening brace should be on same line"
    match_kinds:
      - identifier
      - keyword
      - typeidentifier
    regex: '(?:init|func)[^{}]+(?:\s{2,}|[^ ])\{\s*$'

  opening_brace_statement:
    include: "*.swift"
    name: "Opening brace rule"
    message: "Opening brace should be on same line"
    match_kinds:
      - identifier
      - keyword
      - typeidentifier
    regex: '(?:if|guard|while|for|switch|do|else|catch)\s(?:\s{2,}|[^ ])\{\s*$'

  todo_fixme:
    include: "*.swift"
    name: "Todo and fixme"
    message: "Todo and fixme must have a task number"
    regex: '\/\/\s*(?i:todo|fixme)(?i:(?!\d+).)+$'

  unowned_variable_capture:
    include: "*.swift"
    name: "Unowned Variable Capture"
    message: "Prefer capturing references as weak to avoid potential crashes."
    regex: '\[(?:(?!\]).)*\bunowned\b.*\]' 

  explicit_failure_calls:
    include: "*.swift"
    name: "Avoid asserting 'false'"
    message: "Use assertionFailure(...) or preconditionFailure(...) instead"
    regex: '(assert|precondition)\(false\)|(assertion|precondition)(Failure\(\))'

  spacing_before_parenthesis:
    include: "*.swift"
    name: "Spacing before parenthesis rule"
    message: "There should be no space before opening parenthesis"
    match_kinds:
      - identifier
      - keyword
      - typeidentifier
    regex: '(?:init|func)[\w\s]+\s\('

#  tabs_for_indentation:
#    include: "*.swift"
#    name: "Tabs for indentation rule"
#    message: "Use tabs instead of spaces for indentation"
#    regex: '.*(\n[ ]{4,})'

  prohibited_cyrillic:
    include: "*.swift"
    name: "Prohibited cyrillic rule"
    message: "Usage of cyrillic alphabet is prohibited (look for cyrillic С)"
    match_kinds:
      - identifier
      - typeidentifier
    regex: '[а-яА-ЯёЁ]'

  prohibited_global_constants:
    include: "*.swift"
    name: "Prohibited global constants rule"
    message: "Global constants are prohibited, make it private or use enum"
    regex: '^(?:(?:public|internal)\s+)?(?:let|var)\s+'

  comparison_assignment:
    include: "*.swift"
    name: "Discouraged usage of comparison assignment"
    message: "Wrap comparison expression with parenthesis"
    regex: '=[ \t]+[^(]\S+[ \t]+[=!]=[ \t]+\S+[^)]'
  
  required_final:
    include: "*.swift"
    name: "Required `final`"
    message: "Try to use composition over inheritance"
    regex: '^[\t ]*(?:(?:internal|private)[\t ]+)?class[\t ]+(?!(?:func|var|let)[\t ]+)'

  extra_space:
    include: "*.swift"
    name: "Extra space found"
    message: "Check your expression for 2 or more space symbols in a row; use `disable:next` for tests if necessary"
    regex: '[a-z0-9]{2,}[ ]{2,}[a-z0-9]{2,}|[^\s][ ]{2,}\{'

  extra_whitespace:
    include: "*.swift"
    name: "Extra whitespace found"
    message: "Check your expression for zero or 2 or more whitespace symbols in a row"
    regex: '(let|var) [\w]+(( {2,}| {0})=( {2,}| {0})| =( {2,}| {0})|( {2,}| {0})= )[\w"]+'
